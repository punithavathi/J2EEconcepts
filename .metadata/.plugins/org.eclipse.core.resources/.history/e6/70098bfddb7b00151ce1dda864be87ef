package com.tt.in;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Iterator;
import java.util.List;

import javax.jdo.PersistenceManager;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.datanucleus.store.Extent;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import javax.jdo.Query;

import com.google.gson.Gson;


@Controller
public class OauthController {
	@RequestMapping(value = "/oauthlogin", method = RequestMethod.GET)
	public ModelAndView helloWorld(@RequestParam("code") String code,
			HttpServletRequest req, HttpServletResponse res)
			throws IOException, ParseException, ServletException {
		String param1 = "value1";
		String param2 = "value2";

		// for get authorization code
		String query = String.format("param1=%s&param2=%s",
				URLEncoder.encode(param1, "UTF-8"),
				URLEncoder.encode(param2, "UTF-8"));
		String redirect_url = "http://localhost:8888/oauthlogin";
		String clientId = "89209225330-ldkm16n852k69q64p5vi7s5l3b01rgvf.apps.googleusercontent.com";
		String clientSecret = "jTZxtUWNeV-2ahz7rktt7X5x";

		String grant_type = "authorization_code";
		// for get token_access
		URLConnection connection = new URL(
				"https://www.googleapis.com/oauth2/v3/token?client_id="
						+ clientId + "&client_secret=" + clientSecret
						+ "&redirect_uri=" + redirect_url + "&grant_type="
						+ grant_type + "&code=" + code).openConnection();
		connection.setDoOutput(true); // Triggers POST.
		// connection.setRequestProperty("Accept-Charset", "UTF-8");
		connection.setRequestProperty("Content-Type",
				"application/x-www-form-urlencoded;charset=");
		String charset = "UTF-8";
		try (OutputStream output = connection.getOutputStream()) {
			output.write(query.getBytes(charset));
		}

		InputStream response = connection.getInputStream();
		// System.out.println(response);
		StringBuilder str = new StringBuilder();

		for (int c1 = response.read(); c1 != -1; c1 = response.read()) {
			char j = (char) c1;
			str.append((char) j);

		}
		String s = new String(str);
		JSONObject json = (JSONObject) new JSONParser().parse(s);
		String access_token = json.get("access_token").toString();
		System.out.println(json.get("access_token"));
		// System.out.println(str);
		response.close();

		// for get user info
		URLConnection conn = new URL(
				"https://www.googleapis.com/oauth2/v3/userinfo?access_token="
						+ access_token).openConnection();
		conn.setDoOutput(true); // Triggers POST.
		// connection.setRequestProperty("Accept-Charset", "UTF-8");
		conn.setRequestProperty("Content-Type",
				"application/x-www-form-urlencoded;charset=");

		try (OutputStream output1 = conn.getOutputStream()) {
			output1.write(query.getBytes(charset));
		}
		StringBuilder str1 = new StringBuilder();
		InputStream resp = conn.getInputStream();
		for (int c = resp.read(); c != -1; c = resp.read()) {
			char j = (char) c;
			str1.append((char) j);

		}
		String userInfo = new String(str1);
		System.out.println(str1);
		JSONObject j = (JSONObject) new JSONParser().parse(userInfo);
		String pic = (String) (j.get("picture"));
		String userName = (String) j.get("given_name");
		String emailid = (String) j.get("email");
		System.out.println((String) (j.get("picture")));
		Integer date = (Integer) (j.get("date"));
		req.setAttribute("Picture", pic);
		req.setAttribute("name", userName);
		req.setAttribute("email", emailid);
	    PersistenceManager pm = PMF.get().getPersistenceManager();
		User us = new User();
		us.setName(userName);
		us.setMailid(emailid);
		us.setPicture(pic);
		us.setDate(date);
		pm.makePersistent(us);
		
		List<User> result = null;
		Query q1 = pm.newQuery(User.class);
		q1.setFilter("name =='" +userName+ "'");
		result = (List<User>) q1.execute();
		
		System.out.println("" + result);
		pm.close();
		
		/*if (!result.isEmpty()) {
		Iterator<User> iter = result.iterator();
		while (iter.hasNext()) {
		User currentUser = (User) iter.next();
		if (currentUser.getName().equals(userName))
		{
		req.setAttribute("user", currentUser);
		
		}
		}

		} else {
		System.out.println("---------------------");
		User user = new User();
		TimeZone.setDefault(TimeZone.getTimeZone("GMT"));
		Calendar cal = Calendar.getInstance(TimeZone.getDefault());
		Date date = cal.getTime();
		user.setDate(date);
		user.setMailid(emailid);
		user.setPicture(pic);
		pm.makePersistent(user);
		
		*/
		
		
		return new ModelAndView("user", "name", userName);

	}

}
